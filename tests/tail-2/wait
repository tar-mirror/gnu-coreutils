#!/bin/sh
# Make sure that `tail -f' returns immediately if a file doesn't exist
# while `tail -F' waits for it to appear.

# Copyright (C) 2003, 2006-2009 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if test "$VERBOSE" = yes; then
  set -x
  tail --version
fi

. $srcdir/test-lib.sh

require_proc_pid_status_

touch here || framework_failure
touch k || framework_failure
(touch unreadable && chmod a-r unreadable) || framework_failure

fail=0

tail -s0.1 -f not_here &
pid=$!
sleep .5
state=$(get_process_status_ $pid)

if test -n "$state"; then
  case $state in
    S*) echo $0: process still active 1>&2; fail=1 ;;
    *) ;;
  esac
  kill $pid
fi

# Check if the file is really not accessible before use it.
if ! cat unreadable; then
    tail -s0.1 -f unreadable &
    pid=$!
    sleep .5
    state=$(get_process_status_ $pid)

    if test -n "$state"; then
        case $state in
            S*) echo $0: process still active 1>&2; fail=1 ;;
            *) ;;
        esac
        kill $pid
    fi
fi

(tail -s0.1 -f here 2>tail.err) &
pid=$!
sleep .5
state=$(get_process_status_ $pid)

if test -n "$state"; then
  case $state in
    S*) ;;
    *)  echo $0: process died 1>&2; fail=1 ;;
  esac
  kill $pid
fi


# `tail -F' must wait in any case.

(tail -s0.1 -F here 2>>tail.err) &
pid=$!
sleep .5
state=$(get_process_status_ $pid)

if test -n "$state"; then
  case $state in
    S*) ;;
    *) echo $0: process died 1>&2; fail=1 ;;
  esac
  kill $pid
fi

tail -s0.1 -F unreadable &
pid=$!
sleep .5
state=$(get_process_status_ $pid)

if test -n "$state"; then
  case $state in
    S*) ;;
    *) echo $0: process died 1>&2; fail=1 ;;
  esac
  kill $pid
fi

tail -s0.1 -F not_here &
pid=$!
sleep .5
state=$(get_process_status_ $pid)

if test -n "$state"; then
  case $state in
    S*) ;;
    *) echo $0: process died 1>&2; fail=1 ;;
  esac
  kill $pid
fi

test -s tail.err && fail=1

tail -s.1 -F k > tail.out &
pid=$!
sleep .5
mv k l
sleep .5
touch k
mv k l
sleep .5
echo NO >> l
sleep .5
kill $pid
test -s tail.out && fail=1

Exit $fail
